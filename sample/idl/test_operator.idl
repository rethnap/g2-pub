extern "C" int printf(const char* format, ...);
class base {
public:
    void operator++()
    {
        ++a;
        printf("inc(a:%d)!\n", a);
    }

    void operator--()
    {
        --b;
        printf("dec(b:%d)!\n", b);
    }

    bool operator + (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator - (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator * (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator / (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator % (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator ^ (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator | (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator & (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }
    bool operator + ()
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator - ()
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }
    bool operator ~ ()
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator ! ()
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator = (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }


    bool operator < (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator > (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

        bool operator += (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator -= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator *= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator /= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator %= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator ^= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }
    bool operator &= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator |= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator << (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator >> (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator <<= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator >>= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator == (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

    bool operator != (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }
    bool operator <= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

        bool operator >= (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }
        bool operator && (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }

        bool operator || (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }


#if 0
    bool operator <=> (int)
    {
        printf("%s\n", __PRETTY_FUNCTION__);
        return true;
    }
#endif

    void show()
    {
        printf("(a,b) = (%d, %d)\n", a, b);
    }

    int a = 1;
    int b = 2;
};

int32 main()
{
    base B;
    B + 1;
    B - 1;
    B * 1;
    B / 1;
    B % 1;
    B ^ 1;
    B & 1;
    +B;
    -B;
    ~B;
    !B;
    B = 1;
    B < 1;
    B > 1;
    B += 1;
    B -= 1;
    B *= 1;
    B ^= 1;
    B &= 1;
    B |= 1;
    B << 1;
    B >> 1;
    B <<= 1;
    B >>= 1;
    B == 1;
    B <= 1;
    B >= 1;
    B && 1;
    B || 1;



    B.show();
   ++B;
   --B;

    return 0;
}

