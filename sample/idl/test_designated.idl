// code snippet from
//https://en.cppreference.com/w/cpp/language/aggregate_initialization

extern "C" int printf(const char* format, ...);
struct A { int x, y; };
struct B { struct A a; };
#define OUT_OF_ORDER 0
#define ARRAY_DESIGNATOR 1
#define NESTED_DESIGNATOR 2
#define MIXED 3
#define NORMAL 4

#define CASE NORMAL
int simple()
{
#if CASE == OUT_OF_ORDER
    struct A a = {.y = 1, .x = 2}; // valid C, invalid C++ (out of order)
#elif CASE == ARRAY_DESIGNATOR
    int arr[3] = {[1] = 5};        // valid C, invalid C++ (array)
#elif CASE == NESTED_DESIGNATOR
    struct B b = {.a.x = 0};       // valid C, invalid C++ (nested)
#elif CASE == MIXED
    struct A a = {.x = 1, 2};      // valid C, invalid C++ (mixed)
#elif CASE == NORMAL
    struct A a =
    {
        .x = 3,
        .y = 4
    };
#endif

    printf("A is {%d, %d}\n", a.x, a.y);

    return 0;
}

int main()
{
    return simple();
}
