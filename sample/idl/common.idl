#ifndef _IDL_COMMON_IDL
#define _IDL_COMMON_IDL
#pragma once
#if __idlidl__
// c-compat type aliases
//typedef uint8 byte;
//typedef int16 unsigned short;
// typedef int32 int;
// typedef f32 float;
 //typedef f64 double;

// #define c_assert static_assert
// #define PI 3.14159265358979323846

extern "C"

{
// trigonometrics
f64 sin(f64 x);
f32 sinf(f32 x);
f64 sinl(f64 x);

    f64 cos(f64 x);
    f32 cosf(f32 x);
    f64 cosl(f64 x);

    f64 asin(f64 x);
    f32 asinf(f32 x);
    f64 asinl(f64 x);

    f64 acos(f64 x);
    f32 acosf(f32 x);
    f64 acosl(f64 x);

    f64 atan(f64 x);
    f32 atanf(f32 x);
    f64 atanl( f64 x);


    f64 atan2(f64 y, f64 x);
    f32 atan2f(f32 y, f32 x);
    f64 atan2l(f64 y, f64 x);

    f64 sinh(f64 x);
    f32 sinhf(f32 x);
    f64 sinhl(f64 x);

    f64 cosh(f64 x);
    f32 coshf(f32 x);
    f64 coshl(f64 x);

    f64 tanh(f64 x);
    f32 tanhf(f32 x);
    f64 tanhl(f64 x);

    f64 asinh(f64 x);
    f32 asinhf(f32 x);
    f64 asinhl(f64 x);

    f64 acosh(f64 x);
    f32 acoshf(f32 x);
    f64 acoshl(f64 x);

    f64 atanh(f64 x);
    f32 atanhf(f32 x);
    f64 atanhl(f64 x);

    // error
f64 erf(f64 x);
    f32 erff(f32 x);
    f64 erfl(f64 x);

    f64 erfc(f64 x);
    f32 erfcf(f32 x);
    f64 erfcl(f64 x);

    // combinatorics
    f64 lgamma(f64 x);
    f32 lgammaf(f32 x);
    f64 lgammal(f64 x);

    f64 lgamma_r(f64 x, int32 *signp);
    f32 lgammaf_r(f32 x, int32 *signp);
    f64 lgammal_r(f64 x, int32 *signp);

    f64 tgamma(f64 x);
    f32 tgammaf(f32 x);
    f64 tgammal(f64 x);

    //rounds
    f64 ceil(f64 x);
    f32 ceilf(f32 x);
    f64 ceill(f64 x);

    f64 floor(f64 x);
    f32 floorf(f32 x);
    f64 floorl(f64 x);

    f64 trunc(f64 x);
    f32 truncf(f32 x);
    f64 truncl(f64 x);

    f64 round(f64 x);
    f32 roundf(f32 x);
    f64 roundl(f64 x);

    f64 nearbyint(f64 x);
    f32 nearbyintf(f32 x);
    f64 nearbyintl(f64 x);

    f64 rint(f64 x);
    f32 rintf(f32 x);
    f64 rintl(f64 x);

    // exponents
    f64 frexp(f64 x, int32* exp);
    f32 frexpf(f32 x, int32 *exp);
    f64 frexpl(f64 x, int32 *exp);

f64 ldexp(f64 x, int32 exp);
    f32 ldexpf(f32 x, int32 exp);
    f64 ldexpl(f64 x, int32 exp);

    // logarithm
    f64 log(f64 x);
    f32 logf(f32 x);
    f64 logl(f64 x);

// format string
int32 printf(const char* format, ...);
//int32 fprintf(FILE *stream, const char* format, ...);
int32 dprintf(int32 fd, const char* format, ...);
int32 sprintf(char *str, const char* format, ...);
//int32 snprintf(char* str, size_t size, const char* format, ...);

// TODO: implement <stdarg.h>
// int32 vprintf(const char *format, va_list ap);
// int32 vfprintf(FILE *stream, const char *format, va_list ap);
// int32 vdprintf(int32 fd, const char *format, va_list ap);
// int32 vsprintf(char *str, const char *format, va_list ap);
// int32 vsnprintf(char *str, size_t size, const char *format, va_list ap);

void abort();

} // end extern "C"

extern "C++"
{
void* operator new(uint64 count);
void* operator new [] (uint64 count);

void operator delete(void* ptr);
void operator delete [] (void* ptr);
} // end extern "C++"

#endif //__idlidl__
#define assert(x)   \
 if (!(x)) { \
    printf("assert fail: %s:%d\n", __FILE__, __LINE__); \
     abort();           \
     }
#define dimof(x) (sizeof(x) / sizeof(x[0]))
#define c_assert static_assert
#define PI 3.14159265358979323846

#endif
